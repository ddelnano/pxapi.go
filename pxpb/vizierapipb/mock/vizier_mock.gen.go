// Code generated by MockGen. DO NOT EDIT.
// Source: vizier.pb.go

// Package mock_pl_api_vizierpb is a generated GoMock package.
package mock_pl_api_vizierpb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	vizierpb "pixielabs.ai/pixielabs/src/api/public/vizierapipb"	
	reflect "reflect"
)

// MockisColumn_ColData is a mock of isColumn_ColData interface
type MockisColumn_ColData struct {
	ctrl     *gomock.Controller
	recorder *MockisColumn_ColDataMockRecorder
}

// MockisColumn_ColDataMockRecorder is the mock recorder for MockisColumn_ColData
type MockisColumn_ColDataMockRecorder struct {
	mock *MockisColumn_ColData
}

// NewMockisColumn_ColData creates a new mock instance
func NewMockisColumn_ColData(ctrl *gomock.Controller) *MockisColumn_ColData {
	mock := &MockisColumn_ColData{ctrl: ctrl}
	mock.recorder = &MockisColumn_ColDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisColumn_ColData) EXPECT() *MockisColumn_ColDataMockRecorder {
	return m.recorder
}

// isColumn_ColData mocks base method
func (m *MockisColumn_ColData) isColumn_ColData() {
	m.ctrl.Call(m, "isColumn_ColData")
}

// isColumn_ColData indicates an expected call of isColumn_ColData
func (mr *MockisColumn_ColDataMockRecorder) isColumn_ColData() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isColumn_ColData", reflect.TypeOf((*MockisColumn_ColData)(nil).isColumn_ColData))
}

// Equal mocks base method
func (m *MockisColumn_ColData) Equal(arg0 interface{}) bool {
	ret := m.ctrl.Call(m, "Equal", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockisColumn_ColDataMockRecorder) Equal(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockisColumn_ColData)(nil).Equal), arg0)
}

// MarshalTo mocks base method
func (m *MockisColumn_ColData) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisColumn_ColDataMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisColumn_ColData)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisColumn_ColData) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisColumn_ColDataMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisColumn_ColData)(nil).Size))
}

// MockisErrorDetails_Error is a mock of isErrorDetails_Error interface
type MockisErrorDetails_Error struct {
	ctrl     *gomock.Controller
	recorder *MockisErrorDetails_ErrorMockRecorder
}

// MockisErrorDetails_ErrorMockRecorder is the mock recorder for MockisErrorDetails_Error
type MockisErrorDetails_ErrorMockRecorder struct {
	mock *MockisErrorDetails_Error
}

// NewMockisErrorDetails_Error creates a new mock instance
func NewMockisErrorDetails_Error(ctrl *gomock.Controller) *MockisErrorDetails_Error {
	mock := &MockisErrorDetails_Error{ctrl: ctrl}
	mock.recorder = &MockisErrorDetails_ErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisErrorDetails_Error) EXPECT() *MockisErrorDetails_ErrorMockRecorder {
	return m.recorder
}

// isErrorDetails_Error mocks base method
func (m *MockisErrorDetails_Error) isErrorDetails_Error() {
	m.ctrl.Call(m, "isErrorDetails_Error")
}

// isErrorDetails_Error indicates an expected call of isErrorDetails_Error
func (mr *MockisErrorDetails_ErrorMockRecorder) isErrorDetails_Error() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isErrorDetails_Error", reflect.TypeOf((*MockisErrorDetails_Error)(nil).isErrorDetails_Error))
}

// Equal mocks base method
func (m *MockisErrorDetails_Error) Equal(arg0 interface{}) bool {
	ret := m.ctrl.Call(m, "Equal", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockisErrorDetails_ErrorMockRecorder) Equal(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockisErrorDetails_Error)(nil).Equal), arg0)
}

// MarshalTo mocks base method
func (m *MockisErrorDetails_Error) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisErrorDetails_ErrorMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisErrorDetails_Error)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisErrorDetails_Error) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisErrorDetails_ErrorMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisErrorDetails_Error)(nil).Size))
}

// MockisScalarValue_Value is a mock of isScalarValue_Value interface
type MockisScalarValue_Value struct {
	ctrl     *gomock.Controller
	recorder *MockisScalarValue_ValueMockRecorder
}

// MockisScalarValue_ValueMockRecorder is the mock recorder for MockisScalarValue_Value
type MockisScalarValue_ValueMockRecorder struct {
	mock *MockisScalarValue_Value
}

// NewMockisScalarValue_Value creates a new mock instance
func NewMockisScalarValue_Value(ctrl *gomock.Controller) *MockisScalarValue_Value {
	mock := &MockisScalarValue_Value{ctrl: ctrl}
	mock.recorder = &MockisScalarValue_ValueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisScalarValue_Value) EXPECT() *MockisScalarValue_ValueMockRecorder {
	return m.recorder
}

// isScalarValue_Value mocks base method
func (m *MockisScalarValue_Value) isScalarValue_Value() {
	m.ctrl.Call(m, "isScalarValue_Value")
}

// isScalarValue_Value indicates an expected call of isScalarValue_Value
func (mr *MockisScalarValue_ValueMockRecorder) isScalarValue_Value() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isScalarValue_Value", reflect.TypeOf((*MockisScalarValue_Value)(nil).isScalarValue_Value))
}

// Equal mocks base method
func (m *MockisScalarValue_Value) Equal(arg0 interface{}) bool {
	ret := m.ctrl.Call(m, "Equal", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockisScalarValue_ValueMockRecorder) Equal(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockisScalarValue_Value)(nil).Equal), arg0)
}

// MarshalTo mocks base method
func (m *MockisScalarValue_Value) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisScalarValue_ValueMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisScalarValue_Value)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisScalarValue_Value) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisScalarValue_ValueMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisScalarValue_Value)(nil).Size))
}

// MockisExecuteScriptResponse_Result is a mock of isExecuteScriptResponse_Result interface
type MockisExecuteScriptResponse_Result struct {
	ctrl     *gomock.Controller
	recorder *MockisExecuteScriptResponse_ResultMockRecorder
}

// MockisExecuteScriptResponse_ResultMockRecorder is the mock recorder for MockisExecuteScriptResponse_Result
type MockisExecuteScriptResponse_ResultMockRecorder struct {
	mock *MockisExecuteScriptResponse_Result
}

// NewMockisExecuteScriptResponse_Result creates a new mock instance
func NewMockisExecuteScriptResponse_Result(ctrl *gomock.Controller) *MockisExecuteScriptResponse_Result {
	mock := &MockisExecuteScriptResponse_Result{ctrl: ctrl}
	mock.recorder = &MockisExecuteScriptResponse_ResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockisExecuteScriptResponse_Result) EXPECT() *MockisExecuteScriptResponse_ResultMockRecorder {
	return m.recorder
}

// isExecuteScriptResponse_Result mocks base method
func (m *MockisExecuteScriptResponse_Result) isExecuteScriptResponse_Result() {
	m.ctrl.Call(m, "isExecuteScriptResponse_Result")
}

// isExecuteScriptResponse_Result indicates an expected call of isExecuteScriptResponse_Result
func (mr *MockisExecuteScriptResponse_ResultMockRecorder) isExecuteScriptResponse_Result() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isExecuteScriptResponse_Result", reflect.TypeOf((*MockisExecuteScriptResponse_Result)(nil).isExecuteScriptResponse_Result))
}

// Equal mocks base method
func (m *MockisExecuteScriptResponse_Result) Equal(arg0 interface{}) bool {
	ret := m.ctrl.Call(m, "Equal", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Equal indicates an expected call of Equal
func (mr *MockisExecuteScriptResponse_ResultMockRecorder) Equal(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Equal", reflect.TypeOf((*MockisExecuteScriptResponse_Result)(nil).Equal), arg0)
}

// MarshalTo mocks base method
func (m *MockisExecuteScriptResponse_Result) MarshalTo(arg0 []byte) (int, error) {
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo
func (mr *MockisExecuteScriptResponse_ResultMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisExecuteScriptResponse_Result)(nil).MarshalTo), arg0)
}

// Size mocks base method
func (m *MockisExecuteScriptResponse_Result) Size() int {
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size
func (mr *MockisExecuteScriptResponse_ResultMockRecorder) Size() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisExecuteScriptResponse_Result)(nil).Size))
}

// MockVizierServiceClient is a mock of VizierServiceClient interface
type MockVizierServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockVizierServiceClientMockRecorder
}

// MockVizierServiceClientMockRecorder is the mock recorder for MockVizierServiceClient
type MockVizierServiceClientMockRecorder struct {
	mock *MockVizierServiceClient
}

// NewMockVizierServiceClient creates a new mock instance
func NewMockVizierServiceClient(ctrl *gomock.Controller) *MockVizierServiceClient {
	mock := &MockVizierServiceClient{ctrl: ctrl}
	mock.recorder = &MockVizierServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVizierServiceClient) EXPECT() *MockVizierServiceClientMockRecorder {
	return m.recorder
}

// ExecuteScript mocks base method
func (m *MockVizierServiceClient) ExecuteScript(ctx context.Context, in *vizierpb.ExecuteScriptRequest, opts ...grpc.CallOption) (vizierpb.VizierService_ExecuteScriptClient, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteScript", varargs...)
	ret0, _ := ret[0].(vizierpb.VizierService_ExecuteScriptClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteScript indicates an expected call of ExecuteScript
func (mr *MockVizierServiceClientMockRecorder) ExecuteScript(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScript", reflect.TypeOf((*MockVizierServiceClient)(nil).ExecuteScript), varargs...)
}

// HealthCheck mocks base method
func (m *MockVizierServiceClient) HealthCheck(ctx context.Context, in *vizierpb.HealthCheckRequest, opts ...grpc.CallOption) (vizierpb.VizierService_HealthCheckClient, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HealthCheck", varargs...)
	ret0, _ := ret[0].(vizierpb.VizierService_HealthCheckClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck
func (mr *MockVizierServiceClientMockRecorder) HealthCheck(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockVizierServiceClient)(nil).HealthCheck), varargs...)
}

// MockVizierService_ExecuteScriptClient is a mock of VizierService_ExecuteScriptClient interface
type MockVizierService_ExecuteScriptClient struct {
	ctrl     *gomock.Controller
	recorder *MockVizierService_ExecuteScriptClientMockRecorder
}

// MockVizierService_ExecuteScriptClientMockRecorder is the mock recorder for MockVizierService_ExecuteScriptClient
type MockVizierService_ExecuteScriptClientMockRecorder struct {
	mock *MockVizierService_ExecuteScriptClient
}

// NewMockVizierService_ExecuteScriptClient creates a new mock instance
func NewMockVizierService_ExecuteScriptClient(ctrl *gomock.Controller) *MockVizierService_ExecuteScriptClient {
	mock := &MockVizierService_ExecuteScriptClient{ctrl: ctrl}
	mock.recorder = &MockVizierService_ExecuteScriptClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVizierService_ExecuteScriptClient) EXPECT() *MockVizierService_ExecuteScriptClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockVizierService_ExecuteScriptClient) Recv() (*vizierpb.ExecuteScriptResponse, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*vizierpb.ExecuteScriptResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockVizierService_ExecuteScriptClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockVizierService_ExecuteScriptClient)(nil).Recv))
}

// Header mocks base method
func (m *MockVizierService_ExecuteScriptClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockVizierService_ExecuteScriptClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockVizierService_ExecuteScriptClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockVizierService_ExecuteScriptClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockVizierService_ExecuteScriptClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockVizierService_ExecuteScriptClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockVizierService_ExecuteScriptClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockVizierService_ExecuteScriptClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockVizierService_ExecuteScriptClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockVizierService_ExecuteScriptClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockVizierService_ExecuteScriptClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockVizierService_ExecuteScriptClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockVizierService_ExecuteScriptClient) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockVizierService_ExecuteScriptClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockVizierService_ExecuteScriptClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockVizierService_ExecuteScriptClient) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockVizierService_ExecuteScriptClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockVizierService_ExecuteScriptClient)(nil).RecvMsg), m)
}

// MockVizierService_HealthCheckClient is a mock of VizierService_HealthCheckClient interface
type MockVizierService_HealthCheckClient struct {
	ctrl     *gomock.Controller
	recorder *MockVizierService_HealthCheckClientMockRecorder
}

// MockVizierService_HealthCheckClientMockRecorder is the mock recorder for MockVizierService_HealthCheckClient
type MockVizierService_HealthCheckClientMockRecorder struct {
	mock *MockVizierService_HealthCheckClient
}

// NewMockVizierService_HealthCheckClient creates a new mock instance
func NewMockVizierService_HealthCheckClient(ctrl *gomock.Controller) *MockVizierService_HealthCheckClient {
	mock := &MockVizierService_HealthCheckClient{ctrl: ctrl}
	mock.recorder = &MockVizierService_HealthCheckClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVizierService_HealthCheckClient) EXPECT() *MockVizierService_HealthCheckClientMockRecorder {
	return m.recorder
}

// Recv mocks base method
func (m *MockVizierService_HealthCheckClient) Recv() (*vizierpb.HealthCheckResponse, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*vizierpb.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockVizierService_HealthCheckClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockVizierService_HealthCheckClient)(nil).Recv))
}

// Header mocks base method
func (m *MockVizierService_HealthCheckClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockVizierService_HealthCheckClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockVizierService_HealthCheckClient)(nil).Header))
}

// Trailer mocks base method
func (m *MockVizierService_HealthCheckClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockVizierService_HealthCheckClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockVizierService_HealthCheckClient)(nil).Trailer))
}

// CloseSend mocks base method
func (m *MockVizierService_HealthCheckClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockVizierService_HealthCheckClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockVizierService_HealthCheckClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockVizierService_HealthCheckClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockVizierService_HealthCheckClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockVizierService_HealthCheckClient)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockVizierService_HealthCheckClient) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockVizierService_HealthCheckClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockVizierService_HealthCheckClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockVizierService_HealthCheckClient) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockVizierService_HealthCheckClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockVizierService_HealthCheckClient)(nil).RecvMsg), m)
}

// MockVizierServiceServer is a mock of VizierServiceServer interface
type MockVizierServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockVizierServiceServerMockRecorder
}

// MockVizierServiceServerMockRecorder is the mock recorder for MockVizierServiceServer
type MockVizierServiceServerMockRecorder struct {
	mock *MockVizierServiceServer
}

// NewMockVizierServiceServer creates a new mock instance
func NewMockVizierServiceServer(ctrl *gomock.Controller) *MockVizierServiceServer {
	mock := &MockVizierServiceServer{ctrl: ctrl}
	mock.recorder = &MockVizierServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVizierServiceServer) EXPECT() *MockVizierServiceServerMockRecorder {
	return m.recorder
}

// ExecuteScript mocks base method
func (m *MockVizierServiceServer) ExecuteScript(arg0 *vizierpb.ExecuteScriptRequest, arg1 vizierpb.VizierService_ExecuteScriptServer) error {
	ret := m.ctrl.Call(m, "ExecuteScript", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteScript indicates an expected call of ExecuteScript
func (mr *MockVizierServiceServerMockRecorder) ExecuteScript(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteScript", reflect.TypeOf((*MockVizierServiceServer)(nil).ExecuteScript), arg0, arg1)
}

// HealthCheck mocks base method
func (m *MockVizierServiceServer) HealthCheck(arg0 *vizierpb.HealthCheckRequest, arg1 vizierpb.VizierService_HealthCheckServer) error {
	ret := m.ctrl.Call(m, "HealthCheck", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck
func (mr *MockVizierServiceServerMockRecorder) HealthCheck(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockVizierServiceServer)(nil).HealthCheck), arg0, arg1)
}

// MockVizierService_ExecuteScriptServer is a mock of VizierService_ExecuteScriptServer interface
type MockVizierService_ExecuteScriptServer struct {
	ctrl     *gomock.Controller
	recorder *MockVizierService_ExecuteScriptServerMockRecorder
}

// MockVizierService_ExecuteScriptServerMockRecorder is the mock recorder for MockVizierService_ExecuteScriptServer
type MockVizierService_ExecuteScriptServerMockRecorder struct {
	mock *MockVizierService_ExecuteScriptServer
}

// NewMockVizierService_ExecuteScriptServer creates a new mock instance
func NewMockVizierService_ExecuteScriptServer(ctrl *gomock.Controller) *MockVizierService_ExecuteScriptServer {
	mock := &MockVizierService_ExecuteScriptServer{ctrl: ctrl}
	mock.recorder = &MockVizierService_ExecuteScriptServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVizierService_ExecuteScriptServer) EXPECT() *MockVizierService_ExecuteScriptServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockVizierService_ExecuteScriptServer) Send(arg0 *vizierpb.ExecuteScriptResponse) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockVizierService_ExecuteScriptServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockVizierService_ExecuteScriptServer)(nil).Send), arg0)
}

// SetHeader mocks base method
func (m *MockVizierService_ExecuteScriptServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockVizierService_ExecuteScriptServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockVizierService_ExecuteScriptServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockVizierService_ExecuteScriptServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockVizierService_ExecuteScriptServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockVizierService_ExecuteScriptServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockVizierService_ExecuteScriptServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockVizierService_ExecuteScriptServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockVizierService_ExecuteScriptServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockVizierService_ExecuteScriptServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockVizierService_ExecuteScriptServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockVizierService_ExecuteScriptServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockVizierService_ExecuteScriptServer) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockVizierService_ExecuteScriptServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockVizierService_ExecuteScriptServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockVizierService_ExecuteScriptServer) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockVizierService_ExecuteScriptServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockVizierService_ExecuteScriptServer)(nil).RecvMsg), m)
}

// MockVizierService_HealthCheckServer is a mock of VizierService_HealthCheckServer interface
type MockVizierService_HealthCheckServer struct {
	ctrl     *gomock.Controller
	recorder *MockVizierService_HealthCheckServerMockRecorder
}

// MockVizierService_HealthCheckServerMockRecorder is the mock recorder for MockVizierService_HealthCheckServer
type MockVizierService_HealthCheckServerMockRecorder struct {
	mock *MockVizierService_HealthCheckServer
}

// NewMockVizierService_HealthCheckServer creates a new mock instance
func NewMockVizierService_HealthCheckServer(ctrl *gomock.Controller) *MockVizierService_HealthCheckServer {
	mock := &MockVizierService_HealthCheckServer{ctrl: ctrl}
	mock.recorder = &MockVizierService_HealthCheckServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockVizierService_HealthCheckServer) EXPECT() *MockVizierService_HealthCheckServerMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockVizierService_HealthCheckServer) Send(arg0 *vizierpb.HealthCheckResponse) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockVizierService_HealthCheckServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockVizierService_HealthCheckServer)(nil).Send), arg0)
}

// SetHeader mocks base method
func (m *MockVizierService_HealthCheckServer) SetHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockVizierService_HealthCheckServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockVizierService_HealthCheckServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method
func (m *MockVizierService_HealthCheckServer) SendHeader(arg0 metadata.MD) error {
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockVizierService_HealthCheckServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockVizierService_HealthCheckServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockVizierService_HealthCheckServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockVizierService_HealthCheckServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockVizierService_HealthCheckServer)(nil).SetTrailer), arg0)
}

// Context mocks base method
func (m *MockVizierService_HealthCheckServer) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockVizierService_HealthCheckServerMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockVizierService_HealthCheckServer)(nil).Context))
}

// SendMsg mocks base method
func (m_2 *MockVizierService_HealthCheckServer) SendMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockVizierService_HealthCheckServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockVizierService_HealthCheckServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method
func (m_2 *MockVizierService_HealthCheckServer) RecvMsg(m interface{}) error {
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockVizierService_HealthCheckServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockVizierService_HealthCheckServer)(nil).RecvMsg), m)
}
