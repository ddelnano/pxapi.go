// Code generated by MockGen. DO NOT EDIT.
// Source: cloudapi.pb.go

// Package mock_publiccloudapipb is a generated GoMock package.
package mock_publiccloudapipb

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	cloudapipb "pixielabs.ai/pixielabs/src/api/public/cloudapipb"
	reflect "reflect"
)

// MockClusterManagerClient is a mock of ClusterManagerClient interface
type MockClusterManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterManagerClientMockRecorder
}

// MockClusterManagerClientMockRecorder is the mock recorder for MockClusterManagerClient
type MockClusterManagerClientMockRecorder struct {
	mock *MockClusterManagerClient
}

// NewMockClusterManagerClient creates a new mock instance
func NewMockClusterManagerClient(ctrl *gomock.Controller) *MockClusterManagerClient {
	mock := &MockClusterManagerClient{ctrl: ctrl}
	mock.recorder = &MockClusterManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterManagerClient) EXPECT() *MockClusterManagerClientMockRecorder {
	return m.recorder
}

// GetCluster mocks base method
func (m *MockClusterManagerClient) GetCluster(ctx context.Context, in *cloudapipb.GetClusterRequest, opts ...grpc.CallOption) (*cloudapipb.GetClusterResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCluster", varargs...)
	ret0, _ := ret[0].(*cloudapipb.GetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster
func (mr *MockClusterManagerClientMockRecorder) GetCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClusterManagerClient)(nil).GetCluster), varargs...)
}

// UpdateClusterConfig mocks base method
func (m *MockClusterManagerClient) UpdateClusterConfig(ctx context.Context, in *cloudapipb.UpdateClusterConfigRequest, opts ...grpc.CallOption) (*cloudapipb.UpdateClusterConfigResponse, error) {
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterConfig", varargs...)
	ret0, _ := ret[0].(*cloudapipb.UpdateClusterConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterConfig indicates an expected call of UpdateClusterConfig
func (mr *MockClusterManagerClientMockRecorder) UpdateClusterConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterConfig", reflect.TypeOf((*MockClusterManagerClient)(nil).UpdateClusterConfig), varargs...)
}

// MockClusterManagerServer is a mock of ClusterManagerServer interface
type MockClusterManagerServer struct {
	ctrl     *gomock.Controller
	recorder *MockClusterManagerServerMockRecorder
}

// MockClusterManagerServerMockRecorder is the mock recorder for MockClusterManagerServer
type MockClusterManagerServerMockRecorder struct {
	mock *MockClusterManagerServer
}

// NewMockClusterManagerServer creates a new mock instance
func NewMockClusterManagerServer(ctrl *gomock.Controller) *MockClusterManagerServer {
	mock := &MockClusterManagerServer{ctrl: ctrl}
	mock.recorder = &MockClusterManagerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClusterManagerServer) EXPECT() *MockClusterManagerServerMockRecorder {
	return m.recorder
}

// GetCluster mocks base method
func (m *MockClusterManagerServer) GetCluster(arg0 context.Context, arg1 *cloudapipb.GetClusterRequest) (*cloudapipb.GetClusterResponse, error) {
	ret := m.ctrl.Call(m, "GetCluster", arg0, arg1)
	ret0, _ := ret[0].(*cloudapipb.GetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster
func (mr *MockClusterManagerServerMockRecorder) GetCluster(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClusterManagerServer)(nil).GetCluster), arg0, arg1)
}

// UpdateClusterConfig mocks base method
func (m *MockClusterManagerServer) UpdateClusterConfig(arg0 context.Context, arg1 *cloudapipb.UpdateClusterConfigRequest) (*cloudapipb.UpdateClusterConfigResponse, error) {
	ret := m.ctrl.Call(m, "UpdateClusterConfig", arg0, arg1)
	ret0, _ := ret[0].(*cloudapipb.UpdateClusterConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterConfig indicates an expected call of UpdateClusterConfig
func (mr *MockClusterManagerServerMockRecorder) UpdateClusterConfig(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterConfig", reflect.TypeOf((*MockClusterManagerServer)(nil).UpdateClusterConfig), arg0, arg1)
}
