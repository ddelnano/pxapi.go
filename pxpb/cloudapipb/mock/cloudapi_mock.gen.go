// Code generated by MockGen. DO NOT EDIT.
// Source: cloudapi.pb.go

// Package mock_publiccloudapipb is a generated GoMock package.
package mock_publiccloudapipb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	publiccloudapipb "px.dev/pxapi/pxpb/cloudapipb"
)

// MockClusterManagerClient is a mock of ClusterManagerClient interface.
type MockClusterManagerClient struct {
	ctrl     *gomock.Controller
	recorder *MockClusterManagerClientMockRecorder
}

// MockClusterManagerClientMockRecorder is the mock recorder for MockClusterManagerClient.
type MockClusterManagerClientMockRecorder struct {
	mock *MockClusterManagerClient
}

// NewMockClusterManagerClient creates a new mock instance.
func NewMockClusterManagerClient(ctrl *gomock.Controller) *MockClusterManagerClient {
	mock := &MockClusterManagerClient{ctrl: ctrl}
	mock.recorder = &MockClusterManagerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterManagerClient) EXPECT() *MockClusterManagerClientMockRecorder {
	return m.recorder
}

// GetCluster mocks base method.
func (m *MockClusterManagerClient) GetCluster(ctx context.Context, in *publiccloudapipb.GetClusterRequest, opts ...grpc.CallOption) (*publiccloudapipb.GetClusterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCluster", varargs...)
	ret0, _ := ret[0].(*publiccloudapipb.GetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockClusterManagerClientMockRecorder) GetCluster(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClusterManagerClient)(nil).GetCluster), varargs...)
}

// GetClusterConnection mocks base method.
func (m *MockClusterManagerClient) GetClusterConnection(ctx context.Context, in *publiccloudapipb.GetClusterConnectionRequest, opts ...grpc.CallOption) (*publiccloudapipb.GetClusterConnectionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetClusterConnection", varargs...)
	ret0, _ := ret[0].(*publiccloudapipb.GetClusterConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterConnection indicates an expected call of GetClusterConnection.
func (mr *MockClusterManagerClientMockRecorder) GetClusterConnection(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterConnection", reflect.TypeOf((*MockClusterManagerClient)(nil).GetClusterConnection), varargs...)
}

// UpdateClusterConfig mocks base method.
func (m *MockClusterManagerClient) UpdateClusterConfig(ctx context.Context, in *publiccloudapipb.UpdateClusterConfigRequest, opts ...grpc.CallOption) (*publiccloudapipb.UpdateClusterConfigResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateClusterConfig", varargs...)
	ret0, _ := ret[0].(*publiccloudapipb.UpdateClusterConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterConfig indicates an expected call of UpdateClusterConfig.
func (mr *MockClusterManagerClientMockRecorder) UpdateClusterConfig(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterConfig", reflect.TypeOf((*MockClusterManagerClient)(nil).UpdateClusterConfig), varargs...)
}

// MockClusterManagerServer is a mock of ClusterManagerServer interface.
type MockClusterManagerServer struct {
	ctrl     *gomock.Controller
	recorder *MockClusterManagerServerMockRecorder
}

// MockClusterManagerServerMockRecorder is the mock recorder for MockClusterManagerServer.
type MockClusterManagerServerMockRecorder struct {
	mock *MockClusterManagerServer
}

// NewMockClusterManagerServer creates a new mock instance.
func NewMockClusterManagerServer(ctrl *gomock.Controller) *MockClusterManagerServer {
	mock := &MockClusterManagerServer{ctrl: ctrl}
	mock.recorder = &MockClusterManagerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterManagerServer) EXPECT() *MockClusterManagerServerMockRecorder {
	return m.recorder
}

// GetCluster mocks base method.
func (m *MockClusterManagerServer) GetCluster(arg0 context.Context, arg1 *publiccloudapipb.GetClusterRequest) (*publiccloudapipb.GetClusterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster", arg0, arg1)
	ret0, _ := ret[0].(*publiccloudapipb.GetClusterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockClusterManagerServerMockRecorder) GetCluster(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockClusterManagerServer)(nil).GetCluster), arg0, arg1)
}

// GetClusterConnection mocks base method.
func (m *MockClusterManagerServer) GetClusterConnection(arg0 context.Context, arg1 *publiccloudapipb.GetClusterConnectionRequest) (*publiccloudapipb.GetClusterConnectionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterConnection", arg0, arg1)
	ret0, _ := ret[0].(*publiccloudapipb.GetClusterConnectionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterConnection indicates an expected call of GetClusterConnection.
func (mr *MockClusterManagerServerMockRecorder) GetClusterConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterConnection", reflect.TypeOf((*MockClusterManagerServer)(nil).GetClusterConnection), arg0, arg1)
}

// UpdateClusterConfig mocks base method.
func (m *MockClusterManagerServer) UpdateClusterConfig(arg0 context.Context, arg1 *publiccloudapipb.UpdateClusterConfigRequest) (*publiccloudapipb.UpdateClusterConfigResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterConfig", arg0, arg1)
	ret0, _ := ret[0].(*publiccloudapipb.UpdateClusterConfigResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterConfig indicates an expected call of UpdateClusterConfig.
func (mr *MockClusterManagerServerMockRecorder) UpdateClusterConfig(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterConfig", reflect.TypeOf((*MockClusterManagerServer)(nil).UpdateClusterConfig), arg0, arg1)
}

// MockOrganizationServiceClient is a mock of OrganizationServiceClient interface.
type MockOrganizationServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationServiceClientMockRecorder
}

// MockOrganizationServiceClientMockRecorder is the mock recorder for MockOrganizationServiceClient.
type MockOrganizationServiceClientMockRecorder struct {
	mock *MockOrganizationServiceClient
}

// NewMockOrganizationServiceClient creates a new mock instance.
func NewMockOrganizationServiceClient(ctrl *gomock.Controller) *MockOrganizationServiceClient {
	mock := &MockOrganizationServiceClient{ctrl: ctrl}
	mock.recorder = &MockOrganizationServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationServiceClient) EXPECT() *MockOrganizationServiceClientMockRecorder {
	return m.recorder
}

// InviteUser mocks base method.
func (m *MockOrganizationServiceClient) InviteUser(ctx context.Context, in *publiccloudapipb.InviteUserRequest, opts ...grpc.CallOption) (*publiccloudapipb.InviteUserResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InviteUser", varargs...)
	ret0, _ := ret[0].(*publiccloudapipb.InviteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteUser indicates an expected call of InviteUser.
func (mr *MockOrganizationServiceClientMockRecorder) InviteUser(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUser", reflect.TypeOf((*MockOrganizationServiceClient)(nil).InviteUser), varargs...)
}

// MockOrganizationServiceServer is a mock of OrganizationServiceServer interface.
type MockOrganizationServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationServiceServerMockRecorder
}

// MockOrganizationServiceServerMockRecorder is the mock recorder for MockOrganizationServiceServer.
type MockOrganizationServiceServerMockRecorder struct {
	mock *MockOrganizationServiceServer
}

// NewMockOrganizationServiceServer creates a new mock instance.
func NewMockOrganizationServiceServer(ctrl *gomock.Controller) *MockOrganizationServiceServer {
	mock := &MockOrganizationServiceServer{ctrl: ctrl}
	mock.recorder = &MockOrganizationServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizationServiceServer) EXPECT() *MockOrganizationServiceServerMockRecorder {
	return m.recorder
}

// InviteUser mocks base method.
func (m *MockOrganizationServiceServer) InviteUser(arg0 context.Context, arg1 *publiccloudapipb.InviteUserRequest) (*publiccloudapipb.InviteUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InviteUser", arg0, arg1)
	ret0, _ := ret[0].(*publiccloudapipb.InviteUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InviteUser indicates an expected call of InviteUser.
func (mr *MockOrganizationServiceServerMockRecorder) InviteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InviteUser", reflect.TypeOf((*MockOrganizationServiceServer)(nil).InviteUser), arg0, arg1)
}
